<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="test__proto_8cpp" kind="file" language="C++">
    <compoundname>test_proto.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="proto_8h" local="yes">./headers/proto.h</includes>
    <includes refid="proto__internal_8h" local="yes">./headers/proto_internal.h</includes>
    <incdepgraph>
      <node id="3">
        <label>./headers/proto.h</label>
        <link refid="proto_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>./headers/proto_internal.h</label>
        <link refid="proto__internal_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>proto/test/test_proto.cpp</label>
        <link refid="test__proto_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>atomic</label>
      </node>
      <node id="5">
        <label>condition_variable</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>thread</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="test__proto_8cpp_1a4654c7c5d14f018cc07d5ba9d5e77ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_primitives</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_primitives</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="56" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="56" bodyend="58" declfile="proto/test/test_proto.cpp" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a4cd8814b7c26f340857d3e372efe67c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_string</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_string</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="60" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="60" bodyend="62" declfile="proto/test/test_proto.cpp" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1aa11969b45312f8a87435e28c0831b607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_tuple</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_tuple</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="64" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="64" bodyend="66" declfile="proto/test/test_proto.cpp" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a37c58f0f1bfc9445251c503b67d4f264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_list</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_list</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="68" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="68" bodyend="70" declfile="proto/test/test_proto.cpp" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a97656100e4460c9e345ced1d373f3b3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_sparse_list</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_sparse_list</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="72" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="72" bodyend="74" declfile="proto/test/test_proto.cpp" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a7bbbd4752cd85b6f42d308a6548bcedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_objects_and_prototypes</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_objects_and_prototypes</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="76" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="76" bodyend="78" declfile="proto/test/test_proto.cpp" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1aed404269c75fc0e5d45c8c26a2bf3ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_method_call</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_method_call</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="80" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="80" bodyend="82" declfile="proto/test/test_proto.cpp" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a03256f268780e3121d008552c3b6ca7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_gc_stress</definition>
        <argsstring>(proto::ProtoContext &amp;c)</argsstring>
        <name>test_gc_stress</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="84" column="6" bodyfile="proto/test/test_proto.cpp" bodystart="84" bodyend="86" declfile="proto/test/test_proto.cpp" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a9bd1f7f42138411c202acb3de36da503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref> *</type>
        <definition>proto::ProtoObject * native_method_for_test</definition>
        <argsstring>(proto::ProtoContext &amp;c, proto::ProtoObject *self, proto::ProtoObject *slot, proto::ProtoList *args)</argsstring>
        <name>native_method_for_test</name>
        <param>
          <type><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref> *</type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref> *</type>
          <declname>slot</declname>
        </param>
        <param>
          <type><ref refid="classproto_1_1ProtoList" kindref="compound">proto::ProtoList</ref> *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="25" column="20" bodyfile="proto/test/test_proto.cpp" bodystart="25" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="test__proto_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="proto/test/test_proto.cpp" line="35" column="5" bodyfile="proto/test/test_proto.cpp" bodystart="35" bodyend="52"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>test_proto.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>2<sp/>de<sp/>ago.<sp/>de<sp/>2017</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>gamarino</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="proto_8h" kindref="compound">./headers/proto.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="proto__internal_8h" kindref="compound">./headers/proto_internal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Todo<sp/>el<sp/>código<sp/>a<sp/>continuación<sp/>está<sp/>dentro<sp/>del<sp/>&apos;namespace<sp/>proto&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>que<sp/>se<sp/>abre<sp/>en<sp/>&apos;proto.h&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declaraciones<sp/>anticipadas<sp/>de<sp/>las<sp/>funciones<sp/>de<sp/>prueba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a4654c7c5d14f018cc07d5ba9d5e77ece" kindref="member">test_primitives</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a4cd8814b7c26f340857d3e372efe67c6" kindref="member">test_string</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1aa11969b45312f8a87435e28c0831b607" kindref="member">test_tuple</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a37c58f0f1bfc9445251c503b67d4f264" kindref="member">test_list</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a97656100e4460c9e345ced1d373f3b3d" kindref="member">test_sparse_list</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a7bbbd4752cd85b6f42d308a6548bcedc" kindref="member">test_objects_and_prototypes</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1aed404269c75fc0e5d45c8c26a2bf3ec0" kindref="member">test_method_call</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a03256f268780e3121d008552c3b6ca7e" kindref="member">test_gc_stress</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Un<sp/>método<sp/>nativo<sp/>para<sp/>propósitos<sp/>de<sp/>prueba</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref>*<sp/><ref refid="test__proto_8cpp_1a9bd1f7f42138411c202acb3de36da503" kindref="member">native_method_for_test</ref>(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref>*<sp/>self,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classproto_1_1ProtoObject" kindref="compound">proto::ProtoObject</ref>*<sp/>slot,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classproto_1_1ProtoList" kindref="compound">proto::ProtoList</ref>*<sp/>args</highlight></codeline>
<codeline lineno="30"><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;llamada<sp/>a<sp/>método<sp/>nativo&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="proto_8h_1afdd64851a8dadecfaf7581c48d5db136" kindref="member">PROTO_NONE</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Suite<sp/>de<sp/>pruebas<sp/>de<sp/>Proto&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref><sp/>c;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ejecutar<sp/>todas<sp/>las<sp/>pruebas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a4654c7c5d14f018cc07d5ba9d5e77ece" kindref="member">test_primitives</ref>(c);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a4cd8814b7c26f340857d3e372efe67c6" kindref="member">test_string</ref>(c);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1aa11969b45312f8a87435e28c0831b607" kindref="member">test_tuple</ref>(c);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a37c58f0f1bfc9445251c503b67d4f264" kindref="member">test_list</ref>(c);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a97656100e4460c9e345ced1d373f3b3d" kindref="member">test_sparse_list</ref>(c);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a7bbbd4752cd85b6f42d308a6548bcedc" kindref="member">test_objects_and_prototypes</ref>(c);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1aed404269c75fc0e5d45c8c26a2bf3ec0" kindref="member">test_method_call</ref>(c);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test__proto_8cpp_1a03256f268780e3121d008552c3b6ca7e" kindref="member">test_gc_stress</ref>(c);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Todas<sp/>las<sp/>pruebas<sp/>completadas&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---<sp/>Implementaciones<sp/>de<sp/>las<sp/>Pruebas<sp/>---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a4654c7c5d14f018cc07d5ba9d5e77ece" kindref="member">test_primitives</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>primitivas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a4cd8814b7c26f340857d3e372efe67c6" kindref="member">test_string</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1aa11969b45312f8a87435e28c0831b607" kindref="member">test_tuple</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>tuplas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a37c58f0f1bfc9445251c503b67d4f264" kindref="member">test_list</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>listas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a97656100e4460c9e345ced1d373f3b3d" kindref="member">test_sparse_list</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>listas<sp/>dispersas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a7bbbd4752cd85b6f42d308a6548bcedc" kindref="member">test_objects_and_prototypes</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>objetos<sp/>y<sp/>prototipos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1aed404269c75fc0e5d45c8c26a2bf3ec0" kindref="member">test_method_call</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>llamadas<sp/>a<sp/>métodos</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test__proto_8cpp_1a03256f268780e3121d008552c3b6ca7e" kindref="member">test_gc_stress</ref>(<ref refid="classproto_1_1ProtoContext" kindref="compound">proto::ProtoContext</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementación<sp/>para<sp/>pruebas<sp/>de<sp/>estrés<sp/>del<sp/>GC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="proto/test/test_proto.cpp"/>
  </compounddef>
</doxygen>
